#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define FN_LAYER 1

/ {
    chosen { zmk,matrix-transform = &imprint_function_row_full_bottom_row; };

    keymap {
        compatible = "zmk,keymap";

        // TODO: HYPER SEMI

        default_layer {
            bindings = <
&kp ESC    &kp F1  &kp F2     &kp F3    &kp F4    &kp F5              &kp F6     &kp F7    &kp F8     &kp F9    &kp F10                    &kp F11
&kp EQUAL  &kp N1  &kp N2     &kp N3    &kp N4    &kp N5              &kp N6     &kp N7    &kp N8     &kp N9    &kp N0                     &kp MINUS
&kp TAB    &kp Q   &kp W      &kp E     &kp R     &kp T               &kp Y      &kp U     &kp I      &kp O     &kp P                      &kp BSLH
&kp ENTER  &kp A   &kp S      &kp D     &kp F     &kp G               &kp H      &kp J     &kp K      &kp L     &mt LC(LS(LA(LGUI))) SEMI  &kp SQT
&kp LSHFT  &kp Z   &kp X      &kp C     &kp V     &kp B               &kp N      &kp M     &kp COMMA  &kp DOT   &kp FSLH                   &kp RSHFT
&trans     &trans  &kp GRAVE  &kp LEFT  &kp RIGHT                                &kp UP    &kp DOWN   &kp LBKT  &kp RBKT                   &trans

                        &kp LALT   &mo FN_LAYER   &kp HOME           &kp END   &mo FN_LAYER   &kp LC(LA(LGUI))
                        &kp LCTRL  &kp LGUI          &trans        &kp F12   &kp BSPC          &kp SPACE
            >;
        };

        RAISE_LAYER {
            bindings = <
&trans        &kp C_BRI_DN  &kp C_BRI_UP  &trans  &trans  &trans                   &trans    &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT   &kp C_VOL_DN  &kp C_MUTE
&kp C_VOL_UP  &trans        &trans        &trans  &trans  &trans                   &trans    &trans      &trans            &trans       &trans        &kp VOLD
&trans        &trans        &trans        &trans  &trans  &trans                   &trans    &trans      &trans            &kp END      &trans        &trans
&trans        &trans        &trans        &trans  &trans  &trans                   &kp LEFT  &kp DOWN    &kp UP            &kp RIGHT    &trans        &trans
&trans        &trans        &trans        &trans  &trans  &trans                   &trans    &kp C_MUTE  &trans            &trans       &trans        &trans
&trans        &trans        &trans        &trans  &trans                                     &trans      &trans            &trans       &trans        &trans

                               &trans  &trans  &trans                &trans      &trans  &trans
                                 &trans  &trans  &trans            &kp C_VOL_UP  &trans  &trans
            >;
        };
    };
};

//right hand trackball configuration

&trackball_peripheral_listener {
    input-processors =
        // this gets it to the default installation orientation,
        <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>;

    // activate layer 3 within 500ms of the trackball moving
    // <&zip_temp_layer 3 500>;
};

//left hand trackball configuration

&trackball_central_listener {
    input-processors =
        // this gets it to the default installation orientation,
        <&zip_xy_transform INPUT_TRANSFORM_XY_SWAP>,
        // multiply sensitivity by 1, divide by 3 (make it slower for scrolling),
        <&zip_xy_scaler 1 3>,
        // make this trackball output scrolling events by default instead of cursor movement,
        <&zip_xy_to_scroll_mapper>,
        // invert vertical scrolling so that the view moves in the same direction as the top of the trackball.,
        <&zip_scroll_transform INPUT_TRANSFORM_Y_INVERT>;
};
